void CTextureDescrMngr::LoadTHM()
{
	FS_FileSet				flist;
	FS.file_list			(flist,"$game_textures$",FS_ListFiles,"*.thm");
	Msg						("count of .thm files=%d", flist.size());
	FS_FileSetIt It			= flist.begin();
	FS_FileSetIt It_e		= flist.end();
	STextureParams			tp;
	string_path				fn;
	for(;It!=It_e;++It)
	{
		
		FS.update_path		(fn,"$game_textures$", (*It).name.c_str());
		IReader* F			= FS.r_open(fn);
		strcpy_s				(fn,(*It).name.c_str());
		fix_texture_thm_name(fn);

		R_ASSERT2			(F->find_chunk(THM_CHUNK_TYPE), fn);
		F->r_u32			();
		tp.Clear			();
		tp.Load				(*F);
		FS.r_close			(F);
#ifdef _EDITOR
		texture_desc& desc		= m_texture_details[fn];
                desc.m_type                     = tp.type;
		{
#ifndef _EDITOR
		texture_desc& desc		 = m_texture_details[fn];
#endif

			{
				if (desc.m_assoc)
					xr_delete(desc.m_assoc);
				}

				desc.m_assoc->detail_name	= tp.detail_name;
				desc.m_assoc->cs			= xr_new<cl_dt_scaler>(tp.detail_scale);
				desc.m_assoc->usage			= 0;
				
				if( tp.flags.is(STextureParams::flDiffuseDetail) )
					desc.m_assoc->usage		|= (1<<0);
				
				if( tp.flags.is(STextureParams::flBumpDetail) )
					desc.m_assoc->usage		|= (1<<1);

			}
			if(desc.m_spec)
				xr_delete				(desc.m_spec);

			desc.m_spec					= xr_new<texture_spec>();
			desc.m_spec->m_material		= tp.material+tp.material_weight;
			
			if(tp.bump_mode==STextureParams::tbmUse)
				desc.m_spec->m_bump_name	= tp.bump_name;
		}
	}
}